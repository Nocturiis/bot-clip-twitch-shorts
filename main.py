import sys
import os
import json
from datetime import datetime, date

# Ajouter le r√©pertoire 'scripts' au PYTHONPATH pour importer les modules
sys.path.append(os.path.join(os.path.dirname(__file__), 'scripts'))

import get_top_clips
import download_clip
import process_video
import generate_metadata
import upload_youtube # Toujours import√©, m√™me si non utilis√© pour l'upload


# --- Chemins et configuration ---
DATA_DIR = os.path.join(os.path.dirname(__file__), 'data')
os.makedirs(DATA_DIR, exist_ok=True)

PUBLISHED_HISTORY_FILE = os.path.join(DATA_DIR, 'published_shorts_history.json')
# Fichiers temporaires pour le clip
RAW_CLIP_PATH = os.path.join(DATA_DIR, 'temp_raw_clip.mp4')
PROCESSED_CLIP_PATH = os.path.join(DATA_DIR, 'temp_processed_short.mp4')

# --- Fonctions utilitaires pour l'historique ---
def load_published_history():
    """Charge l'historique des clips publi√©s."""
    if not os.path.exists(PUBLISHED_HISTORY_FILE):
        return {}
    try:
        with open(PUBLISHED_HISTORY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è Fichier d'historique des publications corrompu. Cr√©ation d'un nouveau.")
        return {}
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors du chargement de l'historique : {e}")
        return {}

def save_published_history(history_data):
    """Sauvegarde l'historique des clips publi√©s."""
    try:
        with open(PUBLISHED_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors de la sauvegarde de l'historique : {e}")


def get_today_published_ids(history_data):
    """Retourne les IDs des clips publi√©s aujourd'hui."""
    today_str = date.today().isoformat()
    return history_data.get(today_str, [])

def add_to_history(history_data, clip_id, youtube_id):
    """Ajoute un clip √† l'historique pour la date d'aujourd'hui."""
    today_str = date.today().isoformat()
    if today_str not in history_data:
        history_data[today_str] = []
        
    # Stocke l'ID Twitch du clip et l'ID YouTube du Short
    history_data[today_str].append({"twitch_clip_id": clip_id, "youtube_short_id": youtube_id, "timestamp": datetime.now().isoformat()})
    
    # OPTIONNEL: Nettoyer l'historique des anciennes entr√©es (ex: plus de 7 jours)
    # old_dates = [d for d in history_data if (datetime.now().date() - datetime.fromisoformat(d).date()).days > 7]
    # for d in old_dates:
    #       del history_data[d]
    # print(f"Historique nettoy√©. {len(old_dates)} anciennes entr√©es supprim√©es.")


def main():
    print("üöÄ D√©but du workflow de publication de Short YouTube (mode d√©bogage / sans upload)...")

    # 1. Charger l'historique des clips publi√©s
    history = load_published_history()
    today_published_ids = [item["twitch_clip_id"] for item in get_today_published_ids(history)]
    print(f"Clips d√©j√† publi√©s aujourd'hui : {len(today_published_ids)}.")

    # 2. R√©cup√©rer le jeton d'acc√®s Twitch
    twitch_token = get_top_clips.get_twitch_access_token()
    if not twitch_token:
        print("‚ùå Impossible d'obtenir le jeton d'acc√®s Twitch. Fin du script.")
        sys.exit(1)

    # 3. S√©lectionner le prochain clip √† publier
    selected_clip = get_top_clips.select_next_short_clip(
        access_token=twitch_token,
        num_clips_per_source=50, # Augmenter pour avoir plus de candidats
        days_ago=1, # Chercher les clips du dernier jour
        already_published_clip_ids=today_published_ids
    )

    if not selected_clip:
        print("ü§∑‚Äç‚ôÇÔ∏è Aucun nouveau clip adapt√© trouv√© pour la publication aujourd'hui. Fin du script.")
        sys.exit(0) # Sortie normale, pas d'erreur, juste pas de contenu

    # 4. T√©l√©charger le clip
    downloaded_file = download_clip.download_twitch_clip(selected_clip['url'], RAW_CLIP_PATH)
    if not downloaded_file:
        print("‚ùå √âchec du t√©l√©chargement du clip. Fin du script.")
        sys.exit(1)

    # 5. Traiter/couper la vid√©o pour s'assurer qu'elle est adapt√©e au Short
    print("üé¨ Traitement de la vid√©o pour le format Short (d√©coupage si n√©cessaire)...")
    processed_file = process_video.trim_video_for_short(
        input_path=downloaded_file,
        output_path=PROCESSED_CLIP_PATH,
        max_duration_seconds=get_top_clips.MAX_VIDEO_DURATION_SECONDS,
        clip_data=selected_clip,
        enable_webcam_crop=False # Mettez √† True si vous voulez activer le rognage de la webcam
    )
    
    # --- D√âBUT DES NOUVELLES V√âRIFICATIONS ---
    if processed_file: # Si process_video.trim_video_for_short a renvoy√© un chemin (donc succ√®s apparent)
        if not os.path.exists(processed_file):
            print(f"‚ùå ERREUR MAJEURE : Le fichier trait√© devrait exister √† {processed_file}, mais il est introuvable apr√®s traitement.")
            print("Cela indique un probl√®me lors de l'√©criture du fichier vid√©o par MoviePy.")
            processed_file = None # Force le passage √† l'utilisation du fichier brut ou l'arr√™t
        elif os.path.getsize(processed_file) == 0:
            print(f"‚ùå ERREUR MAJEURE : Le fichier trait√© {processed_file} est vide !")
            print("Cela indique que MoviePy a cr√©√© le fichier mais n'a pas pu y √©crire de donn√©es vid√©o.")
            processed_file = None # Force le passage √† l'utilisation du fichier brut ou l'arr√™t
        else:
            print(f"‚úÖ Fichier trait√© trouv√© et non vide : {processed_file} (taille : {os.path.getsize(processed_file)} octets).")
    # --- FIN DES NOUVELLES V√âRIFICATIONS ---


    # Si le script process_video.py n'est pas utilis√© ou renvoie None
    if not processed_file:
        print("‚ö†Ô∏è Le traitement vid√©o a √©chou√© ou n'a pas √©t√© effectu√©. Utilisation du fichier brut si disponible.")
        # Tentative d'utiliser le fichier brut si le traitement a √©chou√©.
        # ATTENTION: Cela pourrait uploader un clip trop long !
        processed_file = downloaded_file 
        if not os.path.exists(processed_file) or os.path.getsize(processed_file) == 0: # V√©rifie si le fichier brut est vide ou n'existe pas
            print("‚ùå Le fichier brut est vide ou n'existe pas. Impossible de continuer. Fin du script.")
            sys.exit(1)
        else:
            print(f"Utilisation du fichier brut pour l'upload : {processed_file}")


    # 6. G√©n√©rer les m√©tadonn√©es YouTube (toujours utile pour le d√©bogage)
    youtube_metadata = generate_metadata.generate_youtube_metadata(selected_clip)

    print("\n--- Informations sur le Short (pour d√©bogage) ---")
    print(f"Titre: {youtube_metadata.get('title')}")
    print(f"Description: {youtube_metadata.get('description')}")
    print(f"Tags: {', '.join(youtube_metadata.get('tags', []))}")
    print(f"Chemin de la vid√©o finale: {processed_file}")
    print("-------------------------------------------------\n")

    # 7. Authentifier et Uploader sur YouTube
    # LA LIGNE SUIVANTE EST MISE EN COMMENTAIRE POUR D√âSACTIVER L'UPLOAD
    youtube_service = upload_youtube.get_authenticated_service()
    if not youtube_service:
        print("‚ùå Impossible d'authentifier le service YouTube. Fin du script.")
        sys.exit(1)

    # youtube_video_id = upload_youtube.upload_youtube_short(youtube_service, processed_file, youtube_metadata)

    # Remplac√© par une simulation d'upload pour le d√©bogage
    # youtube_video_id = None # Simule qu'aucun ID n'a √©t√© retourn√© par l'upload
    # print("‚è© Upload YouTube d√©sactiv√© par le code (ligne comment√©e). Pas d'upload effectu√©.")

    if youtube_video_id: # Cette condition ne sera plus jamais vraie tant que la ligne d'upload est comment√©e
        print(f"üéâ Short YouTube publi√© avec succ√®s ! ID: {youtube_video_id}")
        # 8. Mettre √† jour l'historique des publications (ne sera pas appel√© si l'upload est d√©sactiv√©)
        try: # Ajout d'un try-except pour la gestion de l'historique
            add_to_history(history, selected_clip['id'], youtube_video_id)
            save_published_history(history)
            print(f"‚úÖ Clip '{selected_clip['id']}' ajout√© √† l'historique des publications.")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ajout/sauvegarde √† l'historique apr√®s un upload (simul√© ou r√©el): {e}")
    else:
        print("‚ÑπÔ∏è L'upload YouTube n'a pas √©t√© effectu√© ou a √©chou√© (mode d√©bogage).")
        # Activation de la simulation d'historique pour le d√©bogage
        try:
            add_to_history(history, selected_clip['id'], "SIMULATED_YOUTUBE_ID")
            save_published_history(history)
            print(f"‚úÖ Clip '{selected_clip['id']}' SIMUL√â ajout√© √† l'historique des publications (mode d√©bogage).")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ajout/sauvegarde SIMUL√âE √† l'historique : {e}")


    # 9. Nettoyage des fichiers temporaires
    print("üßπ Nettoyage des fichiers temporaires...")
    if os.path.exists(RAW_CLIP_PATH):
        os.remove(RAW_CLIP_PATH)
        print(f"  - Supprim√©: {RAW_CLIP_PATH}")
    # COMMENTEZ OU SUPPRIMEZ LA LIGNE SUIVANTE POUR GARDER LE FICHIER PROCESSED_CLIP_PATH
    # if os.path.exists(PROCESSED_CLIP_PATH):
    #     os.remove(PROCESSED_CLIP_PATH)
    #     print(f"  - Supprim√©: {PROCESSED_CLIP_PATH}")

    print("‚úÖ Workflow termin√©.")

if __name__ == "__main__":
    main()
    print("DEBUG: Le script main.py s'est termin√© sans erreur Python.") # Ligne de d√©bogage finale